module Scenes.Home.Global exposing
    ( dataToSDT
    , sdtToData
    , sceneToST
    )

{-| This is the doc for this module

Automatically generated by Messenger.

Don't modify this file.

@docs dataToSDT
@docs sdtToData
@docs sdtToData

-}

import Base exposing (GlobalData, Msg)
import Canvas exposing (Renderable)
import Lib.Scene.Base exposing (Scene, SceneMsg, SceneOutputMsg)
import Scenes.Home.Export exposing (Data, nullData)
import Scenes.SceneSettings exposing (SceneDataTypes(..), SceneT)


{-| dataToSDT
-}
dataToSDT : Data -> SceneDataTypes
dataToSDT d =
    HomeDataT d


{-| sdtToData
-}
sdtToData : SceneDataTypes -> Data
sdtToData dt =
    case dt of
        HomeDataT x ->
            x

        _ ->
            nullData


{-| sceneToST
-}
sceneToST : Scene Data -> SceneT
sceneToST sd =
    let
        init : Int -> SceneMsg -> SceneDataTypes
        init t tm =
            dataToSDT (sd.init t tm)

        update : Msg -> GlobalData -> ( SceneDataTypes, Int ) -> ( SceneDataTypes, List SceneOutputMsg, GlobalData )
        update msg gd ( dt, t ) =
            let
                ( sdt, som, newgd ) =
                    sd.update msg gd ( sdtToData dt, t )
            in
            ( dataToSDT sdt, som, newgd )

        view : ( SceneDataTypes, Int ) -> GlobalData -> Maybe Renderable
        view ( dt, t ) vp =
            sd.view ( sdtToData dt, t ) vp
    in
    { init = init
    , update = update
    , view = view
    }
